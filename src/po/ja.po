# Japanese message translations for tuna
# Copyright (C) 2009 THE tuna'S COPYRIGHT HOLDER
# This file is distributed under the same license as the tuna package.
# Satoru Satoh <ssato@redhat.com>, 2009.
#
msgid ""
msgstr ""
"Project-Id-Version: tuna 0.8.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2009-09-30 13:09+0900\n"
"PO-Revision-Date: 2009-09-30 14:23+0900\n"
"Last-Translator: Satoru SATOH <ssato@redhat.com>\n"
"Language-Team: Japanese <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: tuna/tuna_gui.glade:8
msgid "Tuna"
msgstr "Tuna"

#: tuna/tuna_gui.glade:111
msgid "Set Process Attributes"
msgstr "プロセス属性を設定"

#: tuna/tuna_gui.glade:140
msgid "_Just the selected thread"
msgstr "選択したスレッドのみ(_J)"

#: tuna/tuna_gui.glade:155
msgid "_All threads of the selected process"
msgstr "選択したプロセスのすべてのスレッド(_A)"

#: tuna/tuna_gui.glade:172
msgid "A_ll command lines matching the regex below:"
msgstr "正規表現にマッチするすべてのコマンドライン(_L)"

#: tuna/tuna_gui.glade:190
msgid "<b>Set for these processes</b>"
msgstr "<b>これらのプロセス群に設定</b>"

#: tuna/tuna_gui.glade:210
msgid "_Policy: "
msgstr "ポリシー(_P): "

#: tuna/tuna_gui.glade:241
msgid "_Scheduler priority:"
msgstr "スケジューラポリシー(_S):"

#: tuna/tuna_gui.glade:277
msgid "A_ffinity:"
msgstr "アフィニティ(_F):"

#: tuna/tuna_gui.glade:324
msgid "Command line rege_x:"
msgstr "コマンドラインの正規表現(_X):"

#: tuna/tuna_gui.glade:412
msgid "Set IRQ Attributes"
msgstr "IRQ の属性を設定"

#: tuna/tuna_gui.glade:489
msgid "A_ffinity"
msgstr "アフィニティ(_F)"

#: tuna/tuna_gui.glade:504
msgid "_Scheduler priority"
msgstr "スケジューラポリシー(_S)"

#: tuna/tuna_gui.glade:519
msgid "_Policy"
msgstr "ポリシー(_P)"

#: tuna/tuna_gui.glade:539
msgid "<b>Set attributes for this IRQ:</b>"
msgstr "<b>この IRQ の属性を設定:</b>"

#: tuna/tuna_gui.py:106
msgid "Root privilege required"
msgstr "root 権限が必要です"

#: tuna/tuna_gui.py:107
msgid "Some functions will not work without root privilege."
msgstr "いくつかの機能は root 権限なしでは動きません。"

#: tuna/tuna_gui.py:108
msgid "Do you want to continue?"
msgstr "続けますか?"

#: tuna/tuna.py:24
#, python-format
msgid "Kernel Thread %(pid)d (%(cmdline)s):"
msgstr "カーネルスレッド %(pid)d (%(cmdline)s):"

#: tuna/tuna.py:27
#, python-format
msgid "User Thread %(pid)d (%(cmdline)s):"
msgstr "ユーザースレッド %(pid)d (%(cmdline)s):"

#: tuna/tuna.py:181 tuna/tuna.py:206
#, python-format
msgid "could not change %(pid)d affinity to %(new_affinity)s"
msgstr "PID %(pid)d のアフィニティを %(new_affinity)s に変更できませんでした"

#: tuna/help.py:10
msgid ""
"Used to create kernel threads via kthread_create(). It is the parent of all "
"the other kernel threads."
msgstr ""
"kthread_create() 経由でカーネルスレッドを生成するのに使われます。このスレッド"
"は他のすべてのカーネルスレッドの親となります。"

#: tuna/help.py:11
msgid ""
"Per-cpu thread that handles POSIX timer callbacks. Timer callbacks are bound "
"to a cpu and are handled by these threads as per-cpu data."
msgstr ""
"POSIX タイマーのコールバックを扱うための CPU 毎のスレッドです。タイマーコール"
"バックは CPU に関連付けられ、これらのスレッドによってCPU 毎のデータとして処理"
"されます。"

#: tuna/help.py:12
msgid ""
"This cpufreq workqueue runs periodically to sample the idleness of the "
"system, increasing or reducing the CPU frequency to save power. \n"
"[One per CPU]"
msgstr ""
"この cpufreq ワークキューはシステムのアイドルの程度をサンプリングするために定"
"期的に実行され、電力節約のために CPU 周波数を上げ下げします。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:13
msgid ""
"Pushes the RCU grace period along (if possible) and will handle dereferenced "
"RCU callbacks, such as freeing structures after a grace period. \n"
"[One per CPU]"
msgstr ""
"RCU の猶予期間をもし可能なら遅めて、猶予期間後に構造体を開放するような逆参照"
"された RCU コールバックを処理するようにします。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:14
msgid ""
"Used to call user mode helpers from the kernel, such as /sbin/bridge-stp, "
"ocfs2_hb_ctl, pnpbios, poweroff, request-key, etc.\""
msgstr ""
"/sbin/bridge-stp、ocfs2_hb_ctl、pnpbios、poweroff、request-key などといった"
"ユーザーモードのヘルパーをカーネルから呼び出すために使われます。"

#: tuna/help.py:15
msgid "Scheduler load balance monitoring."
msgstr "スケジューラの負荷分散モニタリング"

#: tuna/help.py:16
msgid ""
"Main thread function used to manage a filesystem logging device journal. "
"This kernel thread is responsible for two things: <b>COMMIT</b>: Every so "
"often we need to commit the current state of the filesystem to disk.  The "
"journal thread is responsible for writing all of the metadata buffers to "
"disk. <b>CHECKPOINT</b>: We cannot reuse a used section of the log file "
"until all of the data in that part of the log has been rewritten elsewhere "
"on the disk.  Flushing these old buffers to reclaim space in the log is "
"known as checkpointing, and this thread is responsible for that job."
msgstr ""
"ファイルシステムのロギングデバイスジャーナルを管理するために使われるメインの"
"スレッドです。このカーネルスレッドは次の二つのことについて責任を持ちます: "
"<b>COMMIT</b>: ファイルシステムの現在の状態は頻繁にディスクにコミットされる必"
"要があります。ジャーナルスレッドはすべてのメタデータバッファをディスクに書き"
"込むことについて責任を持ちます。<b>CHECKPOINT</b>: ログファイルの使用中のセク"
"ションについてはその部分のすべてのデータがディスクのどこか他の場所に再度書き"
"込まれるまで、再利用することはできません。ログのスペース確保のためにこれらの"
"古いバッファをフラッシュすることはチェックポイントとして知られていますが、こ"
"のスレッドはその仕事について責任を持っています。"

#: tuna/help.py:17
msgid "Locking arbiter for NFS on the system"
msgstr "システム上の NFS のためのロックの担い手"

# 後半、意訳した.
#: tuna/help.py:18
msgid ""
"Triggered when a rebalance of tasks is needed to CPU domains. This handles "
"balancing of SCHED_OTHER tasks across CPUs. RT tasks balancing is done "
"directly in schedule and wakeup paths.  Runs at prio 1 because it needs to "
"schedule above all SCHED_OTHER tasks. If the user has the same issue but "
"doesn\"t mind having latencies against other kernel threads that run here, "
"then its fine. But it should definitely be documented that PRIO 1 has other "
"threads on it at boot up. \n"
"[One per CPU]"
msgstr ""
"CPU ドメインについてタスクの再分配が必要な場合に実行されます。これは複数の "
"CPU にわたって SCHED_OTHER タスクの分配を処理します。RT タスクの分配はスケ"
"ジュールと起床パスで直接行なわれます。すべてのSCHED_OTHER タスクをスケジュー"
"ルしなくてはならないので、優先度 1 で実行されています。もし同じ問題を持ってい"
"て、しかしこの優先度で実行されている他のカーネルスレッドに対してレイテンシが"
"生じることを気にしないのなら、こうすることでうまくいくでしょう。しかし優先度 "
"1 であっても起動したときから同じ優先度で他のスレッドが動いていることに注意が"
"必要です。\n"
"[CPU 毎に一つ]"

# Needs review
#: tuna/help.py:19
msgid ""
"This is from a poor attempt to prioritize tasklets. Some tasklets wanted to "
"run before anything else. Thus there were two tasklet softirqs made. "
"tasklet_vec and tasklet_hi_vec. A driver writer could put their \"critical\" "
"tasklets into the tasklet_hi_vec and it would run before other softirqs. "
"This never really worked as intended. \n"
"[One per CPU]"
msgstr ""
"これはタスクレットを優先度付けしようとするはかない試みです。いくつかのタスク"
"レットは他より先に実行されるのを望んでいます。そういうわけで tasklet_vec と "
"tasklet_hi_vec の二つのタスクレットソフトウェア割り込みがつくられました。ドラ"
"イバ開発者は彼らの \"緊急度の高い\" タスクレットをtasklet_hi_vec におき、他の"
"ソフトウェア割り込みよりも前に実行されるように望みます。しかし、決して意図さ"
"れたとおりには動きません。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:20
msgid ""
"Workqueue used to process IO requests. Used by IO schedulers and block "
"device drivers. \n"
"[One per CPU]"
msgstr ""
"ワークキューは IO リクエストを処理するのに使われます。IO スケジューラとブロッ"
"クデバイスドライバが利用します。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:21
msgid ""
"When receiving a packet the device will place the packet on a queue with its "
"hard interrupt (threaded in RT). The sirq-net-rx is responsible for finding "
"out what to do with the packet. It may forward it to another box if the "
"current box is used as a router, or it will find the task the packet is for. "
"If that task is currently waiting for the packet, the softirq might hand it "
"off to that task and the task will handle the rest of the processing of the "
"packet. \n"
"[One per CPU]"
msgstr ""
"パケットを受信するとデバイスはハードウェア割り込み (RT スレッド) でパケットを"
"キューに置きます。sirq-net-rx はそのパケットをどうすべきかみつけることに責任"
"を持っています。ルーターなら他のサーバーに転送されるでしょうし、あるいはパ"
"ケットのタスクをみつけるでしょう。もしタスクがそのときそのパケットを待ってい"
"るのならソフトウェア割り込みはタスクに引き継ぎ、タスクはパケットの処理の残り"
"の部分を実行します。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:22
msgid ""
"This should run at the lowest RT priority. With preemptible RCU, a loaded "
"system may have tasks that hold RCU locks but have a high nice value. These "
"tasks may be pushed off for seconds, and if the system is tight on memory, "
"the RCU deferred freeing may not occur. The result can be drastic.  The "
"krcupreemptd is a daemon that runs just above SCHED_OTHER and wakes up once "
"a second and performs a synchronize RCU. With RCU boosting, all those that "
"hold RCU locks will inherit the priority of the krcupreemptd and wake up and "
"release the RCU locks.  This is only a concern for loaded systems and "
"SCHED_OTHER tasks. If there is an issue of RT tasks starving out SCHED_OTHER "
"tasks and causing problems with freeing memory, then the RT tasks are "
"designed badly."
msgstr ""
"これはもっとも低い RT 優先度で実行されるべきです。プリエンプト可能なRCU では"
"システムは RCU ロックを持つが高い nice 値を持つタスクが生じえます。これらタス"
"クがしばらくスリープしてしまっていても、もしシステムのメモリが逼迫していれば "
"RCU の遅延開放は起らないかもしれません。その結果は深刻です。krcupreemptd は"
"SCHED_OTHER でちょうど動作し、一秒間に一回起きて RCU の同期を実行します。RCU "
"の優先度を上げることで、すべてのこれら RCU ロックを保持するタスクは"
"krcupreemptd の優先度を継承し、起床して RCU ロックを開放します。起動されたシ"
"ステムと SCHED_OTHER タスクの唯一の心配はこれ (RCU のロック) だけです。RT タ"
"スクの問題によって SCHED_OTHER タスクの資源が枯渇し、メモリを開放する上で問題"
"が生じるのなら、それは RT タスクの設計が悪いからです。"

#: tuna/help.py:23
msgid ""
"Activated when under heavy networking activity. Used to avoid monopolizing "
"the CPUs doing just software interrupt processing. \n"
"[One per CPU]"
msgstr ""
"ネットワークの活動が重い場合にアクティブになります。ソフトウェア割り込みの処"
"理のためだけに CPU が占有されることを防ぐために使われます。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:24
msgid ""
"Basically the timer wheel. Things that add itself to the timer wheel "
"timeouts will be handled by this softirq. Parts of the kernel that need "
"timeouts will use this softirq (i.e. network timeouts). The resolution to "
"these timeouts are defined by the HZ value. \n"
"[One per CPU]"
msgstr ""
"基本的にはタイマー処理を行います。タイマーに登録してタイムアウトするとこのソ"
"フトウェア割り込みによって処理されます。例えばネットワークのタイムアウトなど"
"タイムアウトを必要とするカーネル部分でこのソフトウェア割り込みが利用されま"
"す。タイムアウトの時間分解能は HZ 値で定義されます。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:25
msgid ""
"Global workqueue, used to schedule work to be done in process context. \n"
"[One per CPU]"
msgstr ""
"グローバルのワークキューであり、プロセスコンテキストで実行されるスケジュール"
"処理に使われます。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:26
msgid ""
"Run briefly once per second to reset the softlockup timestamp.  If this gets "
"delayed for more than 60 seconds then a message will be printed.  Use /proc/"
"sys/kernel/hung_task_timeout_secs and /proc/sys/kernel/hung_task_check_count "
"to control this behaviour.  Setting /proc/sys/kernel/hung_task_timeout_secs "
"to zero will disable this check. \n"
"[One per CPU]"
msgstr ""
"ソフトロックアップタイムスタンプをリセットするために一秒間に一度起動されま"
"す。60 秒以上遅らせられた場合はメッセージが出力されます。/proc/sys/kernel/"
"hung_task_timeout_secs と /proc/sys/kernel/hung_task_check_count でふるまいを"
"制御します。/proc/sys/kernel/hung_task_timeout_secs を 0 にするとこのチェック"
"は無効となります。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:27
msgid ""
"This is the network transmit queue. Most of the time the network packets "
"will be handled by the task that is sending the packets out, and doing so at "
"the priority of that task. But if the protocol window or the network device "
"queue is full, then the packets will be pushed off to later. The sirq-net-tx "
"softirq is responsible for sending out these packets. \n"
"[One per CPU]"
msgstr ""
"ネットワークの転送キューです。ほとんどの時間ネットワークパケットはこのタスク"
"の優先度でこのタスクによって処理されて送出されています。しかしプロトコルウィ"
"ンドウまたはネットワークデバイスキューが一杯になると、パケットは後で送出され"
"るようになります。sirq-net-tx ソフトウェア割り込みはこれらのパケットの送信に"
"責任を持っています。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:28
msgid ""
"Called after a completion to a block device is made. Looking further into "
"this call, I only see a couple of users. The SCSI driver uses this as well "
"as cciss. \n"
"[One per CPU]"
msgstr ""
"ブロックデバイスで処理が完了すると呼び出されます。よく見るとこれを使っている"
"ユーザーはごく少数だけです。SCSI ドライバは cciss と同じようにこれを使ってい"
"ます。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:29
msgid ""
"Catch all for those devices that couldn\"t use softirqs directly and mostly "
"made before work queues were around. The difference between a tasklet and a "
"softirq is that the same tasklet can not run on two different CPUs at the "
"same time. In this regard it acts like a \"task\" (hence the name \"tasklet"
"\"). Various devices use tasklets. \n"
"[One per CPU]"
msgstr ""
"ソフトウェア割り込みを直接使うことができず、ワークキューが活動する前にたいて"
"い発生するデバイスのためのすべての事象をつかまえます。タスクレットとソフト"
"ウェア割り込みの違いは同じタスクレットは同時に二つの異なる CPU で実行できない"
"ということです。この点においてタスクレットは \"タスク\" (それ故に名前も \"タ"
"スクレット\") のように振舞います。様々なデバイスがタスクレットを使っていま"
"す。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:30
msgid ""
"Per USB storage device virtual SCSI controller.  Persistant across device "
"insertion/removal, as is the SCSI node. This is done so that a device which "
"is removed can be re-attached and be granted the same /dev node as before, "
"creating persistance between connections of the target unit.  Gets commands "
"from the SCSI mid-layer and, after sanity checking several things, sends the "
"command to the \"protocol\" handler. This handler is responsible for re-"
"writing the command (if necessary) into a form which the device will accept. "
"For example, ATAPI devices do not support 6-byte commands. Thus, they must "
"be re-written into 10-byte variants."
msgstr ""
"USB ストレージデバイス毎の仮想 SCSI コントローラ。SCSI ノードとしてデバイスの"
"抜き差しを通して永続します。これはターゲットユニットの接続を通して永続的につ"
"くられ、抜かれたデバイスが再度接続されたときに前と同じ /dev ノードとなるよう"
"になります。SCSI 中間レイヤーからコマンドを受け取り、いくつか健全性チェックを"
"行った後で、\"プロトコル\" ハンドラにそのコマンドを送ります。ハンドラは必要な"
"らデバイスが受け取ることのできる形式にコマンドを変換する責任を担っています。"
"例えば ATAPI デバイスは 6-byte コマンドをサポートしていませんので、10-byte の"
"ものに変換してやらなければいけません。"

#: tuna/help.py:31
msgid ""
"High priority system thread that performs thread migration by bumping thread "
"off CPU then pushing onto another runqueue. \n"
"[One per CPU]"
msgstr ""
"スレッドを CPU から外し、他の実行キューに移動することで、スレッドマイグレー"
"ションを実行する高い優先度のシステムスレッドです。\n"
"[CPU 毎に一つ]"

#: tuna/help.py:32
msgid ""
"Handles Sun RPC network messages (mainly for NFS) \n"
"[One per CPU]"
msgstr ""
"主に NFS のための Sun RPC ネットワークメッセージを処理します。\n"
"[CPU 毎に一つ]"

#: tuna/gui/util.py:50
msgid "Invalid affinity, specify a list of CPUs!"
msgstr "不正なアフィニティです。CPU のリストを指定して下さい!"

#: tuna/gui/util.py:69
msgid "Invalid parameters!"
msgstr "不正なパラメータです!"

#: tuna/gui/util.py:76
#, python-format
msgid ""
"couldn't change pid %(pid)d from %(cpol)s(%(cpri)d) to %(npol)s(%(npri)d)!"
msgstr ""
"PID %(pid)d について %(cpol)s(%(cpri)d) から %(npol)s(%(npri)d) に変更できま"
"せんでした!"

#: tuna/gui/util.py:110
#, python-format
msgid "couldn't change pid %(pid)d from %(caff)s to %(naff)s!"
msgstr "PID %(pid)d について %(caff)s から %(naff)s に変更できませんでした!"

#: tuna/gui/cpuview.py:15
#, python-format
msgid "Couldn't change the affinity of %(tid)d to %(affinity)s!"
msgstr "%(tid)d のアフィニティを %(affinity)s に変更できませんでした!"

#: tuna/gui/cpuview.py:46
#, python-format
msgid "Socket %s"
msgstr "ソケット %s"

#: tuna/gui/cpuview.py:64
msgid "Filter"
msgstr "フィルタ"

#: tuna/gui/cpuview.py:68
msgid "CPU"
msgstr "CPU"

#: tuna/gui/cpuview.py:74 tuna/gui/cpuview.py:78
msgid "Usage"
msgstr "消費率"

#: tuna/gui/cpuview.py:197
msgid "I_nclude CPU"
msgstr "CPU を含める(_N)"

#: tuna/gui/cpuview.py:198
msgid "_Isolate CPU"
msgstr "CPU を隔離(_I)"

#: tuna/gui/cpuview.py:200
msgid "I_nclude CPU Socket"
msgstr "CPU ソケットを含める(_N)"

#: tuna/gui/cpuview.py:201
msgid "_Isolate CPU Socket"
msgstr "CPU ソケットを隔離(_I)"

#: tuna/gui/cpuview.py:202
msgid "_Restore CPU"
msgstr "CPU を復帰させる(_R)"

#: tuna/gui/procview.py:200 tuna/gui/procview.py:220 tuna/gui/irqview.py:118
msgid "PID"
msgstr "PID"

#: tuna/gui/procview.py:201 tuna/gui/procview.py:221 tuna/gui/irqview.py:119
msgid "Policy"
msgstr "ポリシー"

#: tuna/gui/procview.py:202 tuna/gui/procview.py:222 tuna/gui/irqview.py:120
msgid "Priority"
msgstr "優先度"

#: tuna/gui/procview.py:203 tuna/gui/procview.py:223 tuna/gui/irqview.py:121
#: tuna/gui/irqview.py:140
msgid "Affinity"
msgstr "アフィニティ"

#: tuna/gui/procview.py:204
msgid "VolCtxtSwitch"
msgstr "VolCtxtSwitch"

#: tuna/gui/procview.py:205
msgid "NonVolCtxtSwitch"
msgstr "NonVolCtxtSwitch"

#: tuna/gui/procview.py:206 tuna/gui/procview.py:224
msgid "Command Line"
msgstr "コマンドライン"

#: tuna/gui/procview.py:284
msgid "Kernel Thread"
msgstr "カーネルスレッド"

#: tuna/gui/procview.py:470
msgid "Save As"
msgstr "名前を付けて保存"

#: tuna/gui/procview.py:528
#, python-format
msgid "Kernel thread tunings saved to %s!"
msgstr "カーネルスレッド設定を %s に保存しました!"

#: tuna/gui/procview.py:541
msgid "_Set process attributes"
msgstr "プロセス属性を設定(_S)"

#: tuna/gui/procview.py:543
msgid "Sto_p refreshing the process list"
msgstr "プロセスリストの更新を停止(_P)"

#: tuna/gui/procview.py:545
msgid "_Refresh the process list"
msgstr "プロセスリストを更新(_R)"

#: tuna/gui/procview.py:548
msgid "_Hide kernel threads"
msgstr "カーネルスレッドを隠す(_H)"

#: tuna/gui/procview.py:550
msgid "_Show kernel threads"
msgstr "カーネルスレッドを表示(_S)"

#: tuna/gui/procview.py:553
msgid "_Hide user threads"
msgstr "ユーザースレッドを隠す(_H)"

#: tuna/gui/procview.py:555
msgid "_Show user threads"
msgstr "ユーザースレッドを表示(_S)"

#: tuna/gui/procview.py:557
msgid "_What is this?"
msgstr "これは何?(_W)"

#: tuna/gui/procview.py:559
msgid "_Save kthreads tunings"
msgstr "カーネルスレッド設定を保存(_S)"

#: tuna/gui/irqview.py:117 tuna/gui/irqview.py:139
msgid "IRQ"
msgstr "IRQ"

#: tuna/gui/irqview.py:122 tuna/gui/irqview.py:141
msgid "Events"
msgstr "Events"

#: tuna/gui/irqview.py:123 tuna/gui/irqview.py:142
msgid "Users"
msgstr "Users"

#: tuna/gui/irqview.py:286
msgid "_Set IRQ attributes"
msgstr "IRQ の属性を設定(_S)"

#: tuna/gui/irqview.py:288
msgid "Sto_p refreshing the IRQ list"
msgstr "IRQ リストの更新を停止(_P)"

#: tuna/gui/irqview.py:290
msgid "_Refresh the IRQ list"
msgstr "IRQ リストを更新(_R)"

#: tuna-cmd.py:43
msgid "Usage: tuna [OPTIONS]"
msgstr "使用法: tuna [OPTIONS]"

#: tuna-cmd.py:45
msgid "Give this help list"
msgstr "このヘルプリストを表示"

#: tuna-cmd.py:46
msgid "Start the GUI"
msgstr "GUI を起動"

#: tuna-cmd.py:47 tuna-cmd.py:48 tuna-cmd.py:52 tuna-cmd.py:54 tuna-cmd.py:57
#: tuna-cmd.py:79
msgid "CPU-LIST"
msgstr "CPU-LIST"

#: tuna-cmd.py:47
#, python-format
msgid "%(cpulist)s affected by commands"
msgstr "%(cpulist)s をコマンドの対象とする"

#: tuna-cmd.py:49
msgid "Operation will affect children threads"
msgstr "子のスレッドも操作の影響下におく"

#: tuna-cmd.py:50
msgid "Display filter the selected entities"
msgstr "選択したエンティティをフィルタ表示"

#: tuna-cmd.py:51
#, python-format
msgid "Move all threads away from %(cpulist)s"
msgstr "すべてのスレッドを %(cpulist)s から移動"

#: tuna-cmd.py:53
#, python-format
msgid "Allow all threads to run on %(cpulist)s"
msgstr "すべてのスレッドについて %(cpulist)s で実行されることを許す"

#: tuna-cmd.py:55
msgid "Operations will not affect kernel threads"
msgstr "カーネルスレッドを操作の対象から外す"

#: tuna-cmd.py:56
#, python-format
msgid "Move selected entities to %(cpulist)s"
msgstr "選択したエンティティを %(cpulist)s に移動"

#: tuna-cmd.py:59
msgid "Show network sockets in use by threads"
msgstr "スレッドが使用しているネットワークソケットを表示"

#: tuna-cmd.py:61 tuna-cmd.py:63
msgid "POLICY"
msgstr "POLICY"

#: tuna-cmd.py:62 tuna-cmd.py:63
msgid "RTPRIO"
msgstr "RTPRIO"

#: tuna-cmd.py:62
#, python-format
msgid "Set thread scheduler tunables: %(policy)s and %(rtprio)s"
msgstr "スレッドのスケジューラパラメータを設定: %(policy)s と %(rtprio)s"

#: tuna-cmd.py:64
msgid "Show thread list"
msgstr "スレッドのリストを表示"

#: tuna-cmd.py:65 tuna-cmd.py:66
msgid "IRQ-LIST"
msgstr "IRQ-LIST"

#: tuna-cmd.py:65
#, python-format
msgid "%(irqlist)s affected by commands"
msgstr "%(irqlist)s をコマンドの対象とする"

#: tuna-cmd.py:67 tuna-cmd.py:68
msgid "FILENAME"
msgstr "FILENAME"

#: tuna-cmd.py:67
#, python-format
msgid "Save kthreads sched tunables to %(filename)s"
msgstr "カーネルスレッドのスケジューラパラメータ設定を %(filename)s に保存"

#: tuna-cmd.py:70 tuna-cmd.py:71
msgid "CPU-SOCKET-LIST"
msgstr "CPU-SOCKET-LIST"

#: tuna-cmd.py:70
#, python-format
msgid "%(cpusocketlist)s affected by commands"
msgstr "%(cpusocketlist)s をコマンドの対象とする"

#: tuna-cmd.py:73 tuna-cmd.py:74
msgid "THREAD-LIST"
msgstr "THREAD-LIST"

#: tuna-cmd.py:73
#, python-format
msgid "%(threadlist)s affected by commands"
msgstr "%(threadlist)s をコマンドの対象とする"

#: tuna-cmd.py:75
msgid "Operations will not affect user threads"
msgstr "ユーザースレッドを操作の対象から外す"

#: tuna-cmd.py:76
msgid "Show version"
msgstr "バージョンを表示"

#: tuna-cmd.py:77
msgid "Provides help about selected entities"
msgstr "選択したエンティティのヘルプを提供"

#: tuna-cmd.py:78
#, python-format
msgid "Spread selected entities over %(cpulist)s"
msgstr "選択したエンティティを %(cpulist)s に展開"

#: tuna-cmd.py:94
#, python-format
msgid "thread %d doesn't exists!"
msgstr "スレッド %d は存在しません!"

#: tuna-cmd.py:113
msgid "thread"
msgstr "スレッド"

#: tuna-cmd.py:400 tuna-cmd.py:405 tuna-cmd.py:422
msgid "requires a cpu list!"
msgstr "CPU リストが必要です!"

#: tuna-cmd.py:425
msgid "requires a list of threads/irqs!"
msgstr "スレッド/IRQ のリストが必要です!"

#: tuna-cmd.py:451
#, python-format
msgid "invalid socket %(socket)s sockets available: %(available)s"
msgstr "不正なソケット %(socket)s, 利用可能なソケット: %(available)s"

#: tuna-cmd.py:476
msgid "requires a thread list!"
msgstr "スレッドリストが必要です!"
